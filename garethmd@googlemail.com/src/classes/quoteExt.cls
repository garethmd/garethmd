/*
 *  This class which extends the Quote__c standard controller is utilized by the QuoteNew
 *  Visualforce page to default values for the user from the related opportunity during 
 *  the creation of a new quote.  It also provides an action that generates the PDF and creates 
 *  an attachment under the parent Quote record who's id is passed into the same Visualforce page 
 *  that can be accessed in the UI to generate the same PDF.
 */
public class quoteExt {

    /* The standard controller object which will be used later for navigation and to invoke
       it's save action method to create the new Quote. */
    ApexPages.StandardController controller;
    
    /* The quote property which is used by the quoteNew and quotePDF Pages and this controller
       to provide access to the relevant quote information. */
    public Quote__c q {get;set;}
    
    /* The constructor to this extension class which takes the standard controller as its argument
       which allows this class to access the methods and information available in the instance for 
       the quote.*/
    public QuoteExt(ApexPages.StandardController c) {
        controller = c;
        q          = (Quote__c) c.getRecord();
        
        /* Set the quote's lookup field to opportunity to the value of the oppid request parameter. */
        q.opportunity__c = ApexPages.currentPage().getParameters().get('oppid');
        
        /* If non-null, get the opportunity and contact role for appropriate defaulting of values. */
        if(q.opportunity__c != null) {
            /* Set the related opportunity with the result of the query that traverses to account for display of the name
               and down to get the primary contact role. */
            q.opportunity__r = [select name, account.name,
                                       (select contact.name, contact.mailingStreet, contact.mailingcity, contact.mailingstate, 
                                               contact.mailingpostalcode 
                                        from opportunityContactRoles 
                                        where isPrimary = true)
                                from opportunity 
                                where id = :q.opportunity__c];
                                
            if(q.opportunity__r.opportunityContactRoles.size()  == 1) {
                OpportunityContactRole r = q.opportunity__r.opportunityContactRoles[0];
                q.contact__r  = r.contact;
                q.contact__c  = r.contact.id;  
                q.street__c   = r.contact.mailingstreet;
                q.city__c     = r.contact.mailingcity;
                q.state__c    = r.contact.mailingstate;
                q.zip_code__c = r.contact.mailingpostalcode;
                
            }
        }
    }
    
    /* This save method will be called instead of the standard controller save method when bound
       to an action component in an associated page, (apex:commandButton on the quoteNew 
       Visualforce page in this example) */
    public PageReference save() {
    
        /* Invoke the standard controller save method which returns the pageReference class 
           that will be used in the navigation, i.e. send the user to the expected location based on
           standard navigation rules provided by salesforce.com */
        PageReference p = controller.save();
        
        /* The quote's record Id */
        id qid = controller.getId();
        
        
        /* The collection of quote_item__c records to be created based on the related opportunity's 
           opportunity line items (products), if any. */
        Quote_Item__c[] items = new Quote_Item__c[]{};
        
        /* Establish the quoteItem collection based on the opportunity's line items, if any */
        for(OpportunityLineItem oli:[select quantity, unitprice, pricebookEntry.product2.name, pricebookEntry.product2id 
                                     from opportunitylineitem
                                     where opportunityid = :q.opportunity__c]) {
                                     
            items.add(new Quote_Item__c(quantity__c = oli.quantity, unit_price__c = oli.unitprice, quote__c = qid, 
                                        name = oli.pricebookentry.product2.name,product__c = oli.pricebookentry.product2id));
        }
        
        /* If any line items need to be inserted do so here.*/
        if(items.size() > 0) insert items;
        
        /* Return the page reference generated by the standard controller save, which usually drops the user
           on the detail page for the newly created object. */
        return p;
        
    }
    
    /* The action method that will generate a PDF document from the QuotePDF page and attach it to 
       the quote provided by the standard controller. Called by the action binding for the attachQuote
       page, this will do the work and take the user back to the quote detail page. */
    public PageReference attachQuote() {
        /* Get the page definition */
        PageReference pdfPage = Page.quotePDF;
        
        /* set the quote id on the page definition */
        pdfPage.getParameters().put('id',q.id);
        
        /* generate the pdf blob */
        Blob pdfBlob = pdfPage.getContent();
        
        /* create the attachment against the quote */
        Attachment a = new Attachment(parentId = q.id, name=q.name + '.pdf', body = pdfBlob);
        
        /* insert the attachment */
        insert a;
        
        /* send the user back to the quote detail page */
        return controller.view();
    }
}